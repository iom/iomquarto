---
title: IOM Presentation Quarto Theme
subtitle: HTML presentation using revealjs
format: quarto_iom_prez-revealjs
embed-resources: true
---

## Presentation with Quarto

- Quarto integrates with Reveal.js to create stunning slideshows.
- Markdown syntax is used to structure and format content.
- Craft a finished **IOM branded** presentation with this template.
- Seamlessly weave together content and executable code.

To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

## Presentation title

- YAML arguments define the content of the title slide.
- Add arguments as needed

```{yaml}
#| echo: true
#| eval: false

---
title: IOM Quarto Theme
subtitle: For revealjs
author: Edouard Legoupil
institute: IOM
date: last-modified
format: quarto_iom_prez-revealjs
---

```

## Basic slides

- Each slide starts with a level 2 heading (`## Slide 1`). For example:

```{markdown}
#| echo: true
#| eval: false

## Slide 1

Some content for slide 1

## Slide 2

Some content for slide 2
```

## Section slides

- A section starts with a level 1 heading (`# Section 1`). For example:

```{markdown}
#| echo: true
#| eval: false

# Section 1

Some content for section 1
```

# Section

Example of a section slide

# IOM section {.slide-blue}

Add `{.slide-blue}` class to make it IOM blue

## Lists

- To add bullet points to a slide, use the Markdown list syntax.
- Works the same way with numbered lists. For example:

```{markdown}
#| echo: true
#| eval: false

- Item 1
    - Item 1.1
    - Item 1.2
- Item 2
- Item 3
```



## Incremental list

- By default the lists are **not** incremental.
- Add the `{.incremental}` class, so each bullet will appear separately.

```{markdown}
#| echo: true
#| eval: false

::: {.incremental}
- Item 1
- Item 2
:::
```

::: {.incremental}
- This is the 1<sup>st</sup> incremental bullet.
- And here the 2<sup>nd</sup>.
:::

::: {.aside}
Include `incremental:true` in the YAML to set it globally.
:::

## Incremental content

- Use `. . .` to separate content and turn it incremental.
- Any content can be incremental. For example:

```{markdown}
#| echo: true
#| eval: false

This will appear first

. . .

And then that!
```

## IOM helpers

**Text**

- Use `{.text-blue}` to apply [IOM blue]{.text-blue} color
- Use `{.text-grey}` for [lighter text]{.text-grey} color

**Background**

- Use `{.bg-blue}` for [light blue]{.bg-blue} background
- Use `{.bg-grey}` for [light grey]{.bg-grey} background

::: {.aside}

For dark background slides use `{.text-yellow}` and `{.bg-yellow}` classes

:::

## Columns

- To create columns, use a `div` container with class `{.columns}`, containing two or more `div` containers with class `{.column}` and a `width` attribute. For example:

```{markdown}
#| echo: true

:::: {.columns}

::: {.column width="40%"}
Left column
:::

::: {.column width="60%"}
Right column
:::

::::
```

## Images

- To insert an image, use the Markdown image syntax. For example:

```{markdown}
#| echo: true
![](path/to/image.jpg)
```



## Code

- To include code, use fenced code blocks with a language specifier. 
- By default the `echo` parameter of code block is set to `false`, turn it to `true` to see the code and the result.

```{markdown}
#| echo: true

\```{r}
#| echo: true
#| warning: false
library(tidyverse)
library(iomthemes)
\```

```



## Plots

- Use the [`{iomthemes}`](https://iom.github.io/iomthemes/) package to produce IOM branded plots directly in the presentation. For example: 

```{r}
#| label: data-plot
#| fig-align: center

library(tidyverse)
library(iomthemes)

data <- readxl::read_excel(system.file(
  "undesa_pd_2020_ims_stock_by_sex_destination_and_origin.xlsx",
                                           package = "iomthemes"),
  col_types = c("numeric", "text", "text","numeric", "text",
               "text", "numeric",
              "numeric","numeric", "numeric", "numeric","numeric","numeric",
              "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", 
              "numeric","numeric", "numeric", "numeric", "numeric", "numeric",
              "numeric","numeric", "numeric" ), 
  sheet = "Table 1", skip = 9) |>
  ## Getting clean variable names
  janitor::clean_names() |>
  dplyr::rename("total.2020"="x2020_14")|>
  # Add ISO2 country code to identify the country level records 
  dplyr::mutate( 
    origin.iso2 = countrycode::countrycode(
                    location_code_of_origin,
                    origin = "un",
                    destination = "iso2c"),
    destination.iso2 = countrycode::countrycode(
                    location_code_of_destination,
                    origin = "un",
                    destination = "iso2c")) |>
  # Filter out rows where 'origin.iso2' and 'origin.iso2' is NA (missing)
  # We do so to keep only country level records - filter out region subtotal
  filter( !(is.na(origin.iso2)) ) |>
  filter( !(is.na(destination.iso2)) ) |>
  # Group the data by country of origin
  group_by(region_development_group_country_or_area_of_origin) |>
  # Summarize the total number of migrants for the year 2020 & remove NA! 
  summarise(total_migrants_2020 = sum(total.2020, na.rm = TRUE)) |>
  # Arrange the summarized data in descending order of total migrants
  arrange(desc(total_migrants_2020)) |>
  # Select the top 10 countries of origin with the highest number of migrants
  slice_head(n = 10) 

data  |>
  ggplot(
    aes(x = reorder(region_development_group_country_or_area_of_origin,
                    total_migrants_2020),
             y = total_migrants_2020)) +
  # Define it as a bar chart and apply IOM color palette
  geom_bar(stat = "identity",
           ## Apply IOM color palette!
           fill = iomthemes::iom_pal(n = 1, name= "pal_blue"),
           width = 0.8) +
  # Flip the chart to make it more legible
  coord_flip()  +
  ## Format the labels for the x axis
  scale_y_continuous(
    labels = scales::label_number(scale_cut = scales::cut_short_scale())) +
  labs(
    title = "Main Countries of Migrant Origin",
    subtitle = "Highlighting the top 10 countries contributing to global
                migration | 2020",
       x = "Country of Origin",
       y = "Total Migrants (2020)",
       caption = "Source: United Nations Department of Economic and Social 
       Affairs, Population Division. International Migrant Stock (2020)") +
  ## and apply IOM theme
  iomthemes::theme_iom(grid = "X", axis = "Y", axis_title = "X")
```

## Tables

- Use `knitr::kable()` function for simple table. For example:

```{r}
#| label: kable-ex
#| echo: false
#| eval: true
knitr::kable(head(data, n = 3)) 
```

## More tables

- Many packages can help you stylize tables, like `{gt}`, `{dt}` and more.
- Use them to customize further the table design in your presentations.

::: columns
::: {.column width="50%"}

```{r}
#| label: gt-ex
#| echo: true
#| eval: false
gt::gt(head(data)) 
```

:::

::: {.column width="50%"}

```{r}
#| label: gt-ex
#| eval: true
```

:::
:::

## Speaker Notes:

- You can add speaker notes to your slides that are only visible to the presenter during the presentation.
- To add speaker notes, use the following syntax:

```{markdown}
#| echo: true

## Slide with speaker notes

Slide content

::: {.notes}
Speaker notes go here.
:::

```

## Exporting into PDF

- Toggle into Print View using the `E` key (or using the [Navigation Menu](https://quarto.org/docs/presentations/revealjs/presenting.html#navigation-menu)).
- Open the in-browser print dialog (CTRL/CMD+P).
- Change the destination setting to **Save as PDF**.
- Find more info on the print to PDF settings [here](https://quarto.org/docs/presentations/revealjs/presenting.html#print-to-pdf).

## More Information

You can learn more about controlling the appearance and layout of RevealJS output here: <https://quarto.org/docs/presentations/revealjs/>

# Thank you {.slide-blue}

Enjoy the template!
